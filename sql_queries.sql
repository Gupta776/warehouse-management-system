
--INSERT cmd
INSERT INTO Orders (order_date, supplier_id, total)
VALUES ('2023-05-07',3,250);

SELECT * FROM Orders WHERE order_date =  '2023-05-07' AND supplier_id = 3 AND total =  250

-- DELETE
DELETE FROM Orders WHERE order_date =  '2023-05-07' AND supplier_id = 3 AND total =  250

--UPDATE
UPDATE Orders SET total = 300 WHERE order_date =  '2023-05-07' 

SELECT * FROM Orders WHERE order_date =  '2023-05-07'

--- find the top 5 most expensive products
SELECT product_name, unit_price 
FROM Products 
ORDER BY unit_price DESC 
LIMIT 5;

--- find the total revenue generated by each supplier
SELECT supplier_comp_name, SUM(total) 
FROM Orders o JOIN Suppliers s ON o.supplier_id = s.supplier_id 
GROUP BY supplier_comp_name;

--- find the products with the highest total quantity in inventory across all warehouses
SELECT p.product_name, SUM(i.inv_quantity) as total_quantity 
FROM Products p JOIN Inventory i ON p.product_id = i.product_id 
GROUP BY p.product_name 
ORDER BY total_quantity DESC 
LIMIT 5;

-- find the products that have been ordered from all suppliers
SELECT p.product_name 
FROM Products p 
WHERE NOT EXISTS (
    SELECT s.supplier_id 
    FROM Suppliers s 
    WHERE NOT EXISTS (
        SELECT o.order_id 
        FROM Orders o JOIN Order_Details od ON o.order_id = od.order_id 
        WHERE od.product_id = p.product_id 
        AND o.supplier_id = s.supplier_id
    )
);

--- average quantity of products in each warehouse
SELECT w.warehouse_name, AVG(i.inv_quantity) as avg_quantity 
FROM Warehouse w JOIN Inventory i ON w.warehouse_id = i.warehouse_id 
GROUP BY w.warehouse_name;


-- total revenue generated by a supplier for a given date range

SELECT o.supplier_id, SUM(od.od_quantity * p.unit_price) 
FROM Order_Details od 
JOIN Products p ON od.product_id = p.product_id 
JOIN Orders o ON od.order_id = o.order_id 
WHERE o.supplier_id IN (2, 22, 24, 55, 98, 199, 299, 499, 999)
AND o.order_date BETWEEN '2022-02-11' AND '2023-02-11' 
GROUP BY o.supplier_id;


--- 
SELECT supplier_comp_name, product_name, od_quantity, Order_Details.unit_price
FROM (
    SELECT *
    FROM Orders
    WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31'
) AS filtered_orders
INNER JOIN Order_Details ON filtered_orders.order_id = Order_Details.order_id
INNER JOIN Products ON Order_Details.product_id = Products.product_id
INNER JOIN Suppliers ON filtered_orders.supplier_id = Suppliers.supplier_id
WHERE EXISTS (
    SELECT 1
    FROM Inventory
    WHERE Inventory.product_id = Products.product_id
    AND Inventory.inv_quantity > 0
);

-- Indexing

-- The total revenue for each supplier for orders placed in the year 2022.

Explain analyse SELECT s.supplier_comp_name, SUM(od.od_quantity * p.unit_price) AS total_revenue
FROM Suppliers s
INNER JOIN Orders o ON o.supplier_id = s.supplier_id
INNER JOIN Order_Details od ON od.order_id = o.order_id
INNER JOIN Products p ON p.product_id = od.product_id
WHERE o.order_date >= '2022-01-01' AND o.order_date < '2023-01-01'
GROUP BY s.supplier_comp_name
ORDER BY total_revenue DESC
LIMIT 10;

CREATE INDEX orders_supplier_idx ON Orders (supplier_id);
CREATE INDEX orders_order_id_idx ON Order_Details (order_id);

DROP INDEX orders_supplier_idx,orders_order_id_idx;

-- Find the Supplier contact name who has ordered on '2020-06-26'

EXPLAIN ANALYSE SELECT O.order_id,O.order_date,S.contact_name 
FROM orders O, suppliers S 
WHERE O.order_date = '2020-06-26' AND s.supplier_id = O.supplier_id

CREATE INDEX order_date_idx ON orders(order_date);

DROP INDEX order_date_idx

-- Find the Supplier contact name who has ordered on '2020-09-27' and grouping by the order id,
-- order date and supplier id by doing having
 
EXPLAIN ANALYSE SELECT O.order_id,O.order_date,S.contact_name 
FROM orders O, suppliers S 
WHERE s.supplier_id = O.supplier_id 
GROUP BY O.order_id,O.order_date,S.contact_name 
HAVING O.order_date ='2020-09-27'

CREATE INDEX order_date_idx ON orders(order_date);
DROP INDEX order_date_idx;


-- Funcitons

-- Function to get the total quantity of a product in all warehouses:
CREATE OR REPLACE FUNCTION get_total_quantity(product_id INTEGER)
RETURNS INTEGER AS $$
BEGIN
    RETURN (
        SELECT SUM(inv_quantity)
        FROM Inventory
        WHERE Inventory.product_id = $1
    );
END;
$$ LANGUAGE plpgsql;

SELECT get_total_quantity(1);
DROP FUNCTION get_total_quantity(1)

-- Function to get the top 5 suppliers by total amount spent on all products:
CREATE OR REPLACE FUNCTION get_top_suppliers_by_spending()
RETURNS TABLE (supplier_comp_name VARCHAR(50), total_spending BIGINT) AS $$
BEGIN
  RETURN QUERY
    SELECT Suppliers.supplier_comp_name, SUM(Order_Details.od_quantity * Products.unit_price) as total_spending
    FROM Suppliers
    JOIN Orders ON Suppliers.supplier_id = Orders.supplier_id
    JOIN Order_Details ON Orders.order_id = Order_Details.order_id
    JOIN Products ON Order_Details.product_id = Products.product_id
    GROUP BY Suppliers.supplier_comp_name
    ORDER BY total_spending DESC
    LIMIT 5;
END;
$$ LANGUAGE plpgsql;

SELECT get_top_suppliers_by_spending()
DROP FUNCTION get_top_suppliers_by_spending()

-- Function to get the total amount spent by a supplier on a product:

CREATE OR REPLACE FUNCTION get_total_amount_spent(supplier_id INTEGER, product_id INTEGER)
RETURNS INTEGER AS $$
DECLARE
  total_amount INTEGER;
BEGIN
  SELECT SUM(od_quantity * Products.unit_price) INTO total_amount
  FROM Order_Details
  JOIN Products ON Order_Details.product_id = Products.product_id
  JOIN Orders ON Order_Details.order_id = Orders.order_id
  WHERE Orders.supplier_id = $1 AND Products.product_id = $2;
  RETURN total_amount;
END;
$$ LANGUAGE plpgsql;

SELECT get_total_amount_spent(365, 208)




